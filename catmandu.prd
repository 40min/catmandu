# Catmandu Bot - Product Requirements Document

## Executive Summary

Catmandu is a modular Telegram bot system designed to enable dynamic feature extension through pluggable modules called "cattackles." The system supports cross-language development, dynamic routing, and seamless interprocess communication using modern architectural patterns.

## 1. Project Overview

### 1.1 Vision
Create a scalable, modular Telegram bot platform where developers can easily add new features (cattackles) in their preferred programming language without modifying the core bot infrastructure.

### 1.2 Core Components
- **Catmandu Core**: Main Python process handling Telegram API integration and routing
- **Cattackles**: Independent feature modules that can be written in any language
- **Communication Layer**: MCP (Model Context Protocol) based communication system
- **Registry System**: Dynamic discovery and registration of cattackles

## 2. Technical Architecture

### 2.1 High-Level Architecture

```
┌─────────────────────────────────────────────────────────────┐
│                    Telegram Bot API                         │
└─────────────────────┬───────────────────────────────────────┘
                      │
┌─────────────────────▼───────────────────────────────────────┐
│                 Catmandu Core                               │
│  ┌─────────────────────────────────────────────────────────┐│
│  │            FastAPI Web Server                          ││
│  │  • Telegram webhook handling                           ││
│  │  • Health checks & metrics                             ││
│  │  • Admin API endpoints                                 ││
│  └─────────────────────────────────────────────────────────┘│
│  ┌─────────────────────────────────────────────────────────┐│
│  │          Message Router & Dispatcher                   ││
│  │  • Command parsing                                     ││
│  │  • Cattackle discovery                                 ││
│  │  • Request/response handling                           ││
│  └─────────────────────────────────────────────────────────┘│
│  ┌─────────────────────────────────────────────────────────┐│
│  │             MCP Client Manager                         ││
│  │  • Connection pooling                                  ││
│  │  • Health monitoring                                   ││
│  │  • Load balancing                                      ││
│  └─────────────────────────────────────────────────────────┘│
└─────────────────────┬───────────────────────────────────────┘
                      │ MCP Protocol
              ┌───────┼───────┐
              │       │       │
┌─────────────▼─┐ ┌───▼───┐ ┌─▼────────────────┐
│   Cattackle   │ │Weather│ │   Cattackle      │
│   (Python)    │ │ (JS)  │ │   (Rust)         │
│ ┌───────────┐ │ │┌─────┐│ │ ┌───────────────┐│
│ │ server    │ │ ││Fast ││ │ │ rust-mcp-sdk  ││
│ │ everything│ │ ││MCP  ││ │ │               ││
│ └───────────┘ │ │└─────┘│ │ └───────────────┘│
│   /todo       │ │/weather│ │   /crypto     │
│   /notes      │ │/forecast│ │   /markets   │
└───────────────┘ └───────┘ └───────────────┘
```

### 2.2 Communication Protocol

**Primary**: MCP (Model Context Protocol) via FastMCP
- **Advantages**: Standardized, language-agnostic, built-in discovery
- **Transport**: stdio, WebSocket, or HTTP
- **Fallback**: REST API for legacy systems

### 2.3 Technology Stack

**Catmandu Core (Python)**:
- FastAPI for web server and API endpoints
- python-telegram-bot for Telegram integration
- mcp-client for MCP communication
- asyncio for concurrent processing
- Redis for caching and state management

**Cattackles**:
- FastMCP servers in respective languages
- Language-specific Telegram types (optional)
- Individual dependency management

## 3. Core Components Specification

### 3.1 Catmandu Core

#### 3.1.1 FastAPI Server
```python
# Core server responsibilities
- POST /webhook/telegram    # Telegram webhook endpoint
- GET /health              # Health check
- GET /cattackles          # List registered cattackles
- POST /admin/reload       # Hot-reload cattackles
- GET /metrics            # Prometheus metrics
```

#### 3.1.2 Message Router
```python
class MessageRouter:
    """Routes incoming messages to appropriate cattackles"""
    
    async def route_message(self, message: TelegramMessage) -> TelegramResponse:
        """
        1. Parse command and extract cattackle identifier
        2. Validate user permissions (optional)
        3. Forward to appropriate cattackle via MCP
        4. Handle response and error cases
        5. Return formatted Telegram response
        """
```

#### 3.1.3 MCP Client Manager
```python
class MCPClientManager:
    """Manages connections to cattackle MCP servers"""
    
    async def discover_cattackles(self) -> List[CattackleInfo]:
        """Auto-discover available cattackles"""
    
    async def call_cattackle(self, cattackle_id: str, 
                           request: CattackleRequest) -> CattackleResponse:
        """Execute cattackle function via MCP"""
```

### 3.2 Cattackle Specification

#### 3.2.1 FastMCP Server Structure
```python
# Example cattackle structure
cattackle-weather/
├── src/
│   ├── server.py          # FastMCP server
│   ├── handlers/          # Command handlers
│   └── utils/             # Utility functions
├── cattackle.toml         # Configuration
├── requirements.txt       # Dependencies
└── README.md             # Documentation
```

#### 3.2.2 Configuration Schema
```toml
# cattackle.toml
[cattackle]
name = "weather"
version = "1.0.0"
description = "Weather information and forecasts"
author = "Developer Name"

[cattackle.commands]
weather = { description = "Get current weather", usage = "/weather <city>" }
forecast = { description = "Get weather forecast", usage = "/forecast <city>" }

[cattackle.mcp]
transport = "stdio"  # or "websocket", "http"
host = "localhost"   # for websocket/http
port = 8001         # for websocket/http

[cattackle.permissions]
required_permissions = ["weather_access"]
admin_only = false
```

#### 3.2.3 Standard Request/Response Format
```python
# Standard cattackle request
@dataclass
class CattackleRequest:
    command: str
    args: List[str]
    user_id: int
    chat_id: int
    message_id: int
    user_permissions: List[str]
    context: Dict[str, Any]

# Standard cattackle response
@dataclass
class CattackleResponse:
    success: bool
    message: str
    parse_mode: str = "HTML"
    reply_markup: Optional[Dict] = None
    attachments: List[Dict] = None
    error_code: Optional[str] = None
```

## 4. Implementation Phases

### Phase 1: Core Infrastructure (Weeks 1-2)
- Set up FastAPI server with basic webhook handling
- Implement MCP client manager
- Create basic message router
- Develop cattackle discovery system

### Phase 2: MCP Integration (Weeks 3-4)
- Implement FastMCP communication layer
- Create cattackle SDK/templates
- Build configuration management system
- Develop error handling and logging

### Phase 3: First Cattackles (Weeks 5-6)
- Implement reference cattackles (weather, todo, echo)
- Create development tooling
- Build testing framework
- Documentation and examples

### Phase 4: Advanced Features (Weeks 7-8)
- Hot-reload capability
- Metrics and monitoring
- Admin interface
- Performance optimization

## 5. Cattackle Development Experience

### 5.1 Quick Start Template
```python
# Python cattackle template
from fastmcp import FastMCP
from cattopus_sdk import CattackleRequest, CattackleResponse

app = FastMCP("weather-cattackle")

@app.tool()
async def weather(request: CattackleRequest) -> CattackleResponse:
    city = request.args[0] if request.args else "London"
    
    # Your weather logic here
    weather_data = await get_weather(city)
    
    return CattackleResponse(
        success=True,
        message=f"Weather in {city}: {weather_data}",
        parse_mode="HTML"
    )

if __name__ == "__main__":
    app.run(transport="stdio")
```

### 5.2 Development Tools
- **catmandu-cli**: Command-line tool for cattackle management
- **cattackle-template**: Project scaffolding tool
- **catmandu-dev**: Development server with hot-reload
- **cattackle-test**: Testing framework for cattackles

## 6. Security & Permissions

### 6.1 User Permission System
```python
class PermissionManager:
    """Manages user permissions across cattackles"""
    
    async def check_permission(self, user_id: int, 
                             permission: str) -> bool:
        """Check if user has required permission"""
    
    async def get_user_permissions(self, user_id: int) -> List[str]:
        """Get all permissions for a user"""
```

### 6.2 Cattackle Isolation
- Each cattackle runs in its own process
- Limited system access through MCP protocol
- Resource quotas and rate limiting
- Input validation and sanitization

## 7. Scalability Considerations

### 7.1 Horizontal Scaling
- Stateless cattackle design
- Load balancing across multiple instances
- Distributed caching with Redis
- Database sharding for user data

### 7.2 Performance Optimization
- Connection pooling for MCP clients
- Async/await throughout the stack
- Response caching for expensive operations
- Graceful degradation under load

## 8. Monitoring & Observability

### 8.1 Metrics Collection
- Request/response times per cattackle
- Error rates and success rates
- Resource usage monitoring
- User activity analytics

### 8.2 Logging Strategy
- Structured logging with correlation IDs
- Centralized log aggregation
- Error tracking and alerting
- Performance profiling

## 9. Deployment Strategy

### 9.1 Container Architecture
```dockerfile
# Catmandu core container
FROM python:3.11-slim
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY src/ /app/src/
CMD ["uvicorn", "src.main:app", "--host", "0.0.0.0"]
```

### 9.2 Orchestration
- Docker Compose for development
- Kubernetes for production
- Automatic cattackle discovery
- Health checks and auto-restart

## 10. Future Enhancements

### 10.1 Advanced Features
- Multi-language natural language processing
- Persistent conversations with context
- Cattackle marketplace and sharing
- Visual flow builder for complex interactions

### 10.2 Integration Possibilities
- Webhook support for external services
- Database connectors for cattackles
- Third-party API integrations
- Machine learning model serving
---
